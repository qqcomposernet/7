def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var58 = func2(arg1, arg2)
    var62 = func9(arg1, var58)
    var63 = (var62 + var62 & var58) | var62
    var64 = 827676507 | (var58 & var58 + arg1)
    var65 = var62 - arg1
    var66 = -72731439 - (arg2 | var65) & var63
    var67 = (-901676460 ^ arg2) + var62 | arg1
    var68 = var65 & var66
    var69 = var58 - var65 & var66
    var70 = arg1 + ((var67 ^ var64) ^ var58)
    var71 = arg2 + var58
    var72 = var70 | var62 | (1042784307 | -1323331185)
    if var71 < var63:
        var73 = var66 - arg1 + (var62 ^ var67)
    else:
        var73 = var64 + var71 & (var62 & arg1)
    var74 = -668 | var70
    var75 = var70 - var74
    var76 = (arg1 ^ arg1) & var58 ^ var72
    var77 = var75 & var63 - var66 + var68
    if var64 < var72:
        var78 = var67 ^ var71 | arg2 - var71
    else:
        var78 = 447 & (var64 + -763118932)
    var79 = (var75 & var62) | var71
    var80 = ((var76 | arg2) + var70) & var79
    var81 = var77 & var71
    var82 = var65 - var81
    var83 = var58 & ((-922317552 + var75) - var67)
    if var67 < var77:
        var84 = var72 - var74
    else:
        var84 = var75 | var80 - (var67 ^ var67)
    if var64 < var82:
        var85 = var81 ^ (var77 ^ var70) | var66
    else:
        var85 = (arg2 & 1412576191) - var70 + var68
    var86 = var72 | 224 ^ var76 | -795313029
    result = var80 ^ var68
    return result
def func2(arg3, arg4):
    var5 = 0
    for var57 in func3(var5, arg4):
        var5 += (var57 + var57) + var5
    return var5
def func4(arg8, arg9):
    var14 = func5(arg9, arg8)
    var44 = var17(var14, arg8)
    var45 = arg9 & var14
    result = var14 + -537767412 - var45 & (var44 + arg8)
    return result
def func8(arg18, arg19):
    var20 = (-741 - 2075669472) - 508 ^ -346
    var21 = arg19 + ((-877 | arg19) ^ 2022865084)
    if arg19 < var21:
        var22 = ((826 | var20) | -670) - -181
    else:
        var22 = arg19 & var20
    var23 = arg19 - (880133582 & 174) & 541
    var24 = -1706685779 ^ -705
    if var24 < var23:
        var25 = arg19 - -52
    else:
        var25 = var24 ^ var21
    var26 = 173303590 + var24
    var27 = var21 ^ 271836853 | var26 & arg19
    var28 = arg19 ^ (600 + var24) | arg19
    var29 = ((var20 & var20) | var23) + var20
    var30 = (1678330520 - var20) ^ (var26 + 672)
    var31 = var24 ^ arg19 - var23 + var21
    var32 = var26 - (var26 & var29) | var31
    var33 = ((arg18 + -516) & var23) & -523
    var34 = var27 + var21 | var28 & var26
    var35 = (var30 & var32 ^ arg19) ^ var27
    var36 = (var27 & arg18) ^ (var23 ^ var30)
    var37 = var30 | var20 + (arg18 + var20)
    var38 = var36 - arg19
    var39 = 305080135 ^ (-826584493 + var33 ^ var30)
    var40 = var31 | var24 + var28 ^ var23
    var41 = var24 ^ var37 | var35
    var42 = arg18 + var37 | var35
    var43 = var24 + (var32 | var26) | arg18
    result = var31 ^ (var24 ^ var38 - var37 - var37 & var24 | var24 - var37)
    return result
def func7():
    closure = [-9]
    def func6(arg15, arg16):
        closure[0] += func8(arg15, arg16)
        return closure[0]
    func = func6
    return func
var17 = func7()
def func5(arg10, arg11):
    var12 = 0
    for var13 in xrange(6):
        if arg11 < arg11:
            var12 += var12 + (-9 - arg11)
        else:
            var12 += (var12 | var12) | arg11
    return var12
def func3(arg6, arg7):
    var46 = func4(arg7, 927285527)
    yield var46
    var47 = -704720747 | (arg7 ^ -877) & -25607248
    yield var47
    var48 = (arg6 ^ 1110309300) + 1359580117 + var47
    yield var48
    var49 = -812 & -748 - (var47 ^ arg6)
    yield var49
    var50 = (-785 + var47) ^ arg6 | var47
    yield var50
    var51 = var49 & var50
    yield var51
    var52 = (var50 & var50 + var48) & var51
    yield var52
    var53 = -1734406321 & var48
    yield var53
    var54 = var53 - arg7
    yield var54
    var55 = var47 - var50
    yield var55
    var56 = arg6 | var52 - var52
    yield var56
def func9(arg59, arg60):
    closure = [0]
    def func10(acc, rest):
        var61 = 2 ^ 8
        closure[0] += var61
        if acc == 0:
            return var61
        else:
            result = func10(acc - 1, var61)
            return result
    result = func10(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 87'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
